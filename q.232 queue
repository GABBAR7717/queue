class MyQueue {
        int n;
        int front=0,rear=0;
        int arr[];
        
    public MyQueue() {
         n=200;
         front=0;
         rear=0;
        arr=new int[n];
    }
    
    public void push(int x) {
        // if(isfull()) 
        // return;

        arr[rear]=x;
        rear=rear+1;
    }
    
    public int pop() {
        int k=0;
        if(!empty()){
            k=arr[front];
            front++;
        }
        return k;
    }
    
    public int peek() 
    {
        if(!empty())
        return arr[front];

        return -1;
    }
    
    public boolean empty() 
    {
        if(front==rear)
        {
            front=0;
            rear=0;
            return true;
        }
        return false;
    }

    public boolean isfull()
    {
        if(rear==n)
        {
            return true;
        }

        return false;
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */





















Q622





class MyCircularQueue{

        private int arr[];
        private int front;
        private int rear;
        private int k;
        public MyCircularQueue(int k){
            arr= new int[k];
            this.k=k;
            front=-1;
            rear=-1;
        }

        public boolean enQueue(int value) {
        if(isFull()){
            return false;
        }
        if(front==-1){
            front=0;
        }
        rear= (rear+1)%k;
        arr[rear]= value;
        return true;
    }
    
    public boolean deQueue() {
        if(isEmpty()){
            return false;
        }
        if(front==rear){
            front=rear=-1;
        }
        else{
            front= (front+1)%k;
        }
        return true;
    }
    
    public int Front() {
        if(isEmpty()){
            return -1;
        }
        return arr[front];
    }
    
    public int Rear() {
        if(isEmpty()){
            return -1;
        }
        return arr[rear];
    }
    
    public boolean isEmpty() {
        return front==-1 && rear==-1;
    }
    
    public boolean isFull() {
        if(front== (rear+1)%k){
            return true;
        }
        return false;
    }
}
